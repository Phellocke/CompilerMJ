Language ModC

TranslationUnit         =   { [ "extern" ] TypeSpecifier, identifier, 
                        ( "[", integer, "]" ] }, ";"
                        | "(", [ Parameter, { ",", Parameter } ], ")",
                        ( CompoundStatement |";"))}
                        ;
4. TypeSpecifier        = { '*' }
                        | “float”
                        | “void”
                        | "byte"
                        ;
5. Parameter            = TypeSpecifier, identifier
                        ;
6. CompoundStatement    = “{”, { Declaration | Statement }, “}”
                        ;
7. Statement            = Assignment
                        | CompoundStatement
                        | SelectionStatement
                        | RepetitionStatement
                        | ReturnStatement
                        ;
8. Assignment           = [ Expression, [ “=”, Expression ] ], “;”
                        ;
9. SelectionStatement   = “if”, “(”, Expression, “)”, Statement, [ “else”, Statement ]
                        ;
10. RepetitionStatement = “while”, “(”, Expression, “)”, Statement
                        ;
11. ReturnStatement     = “return”, [ Expression ], “;”
                        ;
12. Expression          = AndExpression, { “||”, AndExpression }
                        ;
13. AndExpression       = RelationExpression, { “&&”, RelationExpression }
                        ;
14. RelationExpression  = SimpleExpression,
                          [ ( “<=” | “<” | “>=” | “>” | “==” | “!=” ), SimpleExpression ]
                        ;
15. SimpleExpression    = Term, { ( “+” | ”-“ ), Term }
                        ;
16. Term                = Factor, { ( “*” | ”/” | “%” ), Factor }
                        ;
17. Factor              = { "*" | “+” | “-“ | “!” }, Value
                        ;
18. Value               = “(”, Expression, “)”
                        | [ & ] identifier, [ “(“, [ Expression, { “,”, Expression } ], “)” ]
                        | number
                        | void
                        ;


Keywords:
        else extern float func if return string void var while

Special symbols:
        + - * / < <= > >= == != = ; , ( ) [ ] { }

identifier = [_a-zA-Z] [_a-zA-Z0-9]*

Literals:
        float ( [0-9]+\.[0-9]* | \.[0-9]+ ) [ (E|e) [+|-] [0-9]+ ]
        string “\”” <any character (not \n nor EOI)> “\””

Comments:
        /* ... */   non-nested, multiline
        // ... \n   single line