

#include <wchar.h>
#include "Parser.h"
#include "Scanner.h"




void Parser::SynErr(int n) {
	if (errDist >= minErrDist) errors->SynErr(la->line, la->col, n);
	errDist = 0;
}

void Parser::SemErr(const wchar_t* msg) {
	if (errDist >= minErrDist) errors->Error(t->line, t->col, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }
		if (la->kind == _macro) {
		}

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::Cmm() {
		while (StartOf(1)) {
			if (la->kind == 5 /* "extern" */) {
				Get();
			}
			TypeSpecifier();
			Expect(_identifier);
			tab.define(t->val); 
			if (la->kind == 6 /* "," */ || la->kind == 7 /* ";" */ || la->kind == 16 /* "[" */) {
				if (la->kind == 16 /* "[" */) {
					ArrayIndex();
				}
				while (la->kind == 6 /* "," */) {
					Get();
					Expect(_identifier);
					if (la->kind == 16 /* "[" */) {
						ArrayIndex();
					}
				}
				Expect(7 /* ";" */);
			} else if (la->kind == 8 /* "(" */) {
				tab.openScope(); 
				Get();
				if (la->kind == 12 /* "int" */ || la->kind == 13 /* "float" */ || la->kind == 14 /* "void" */) {
					Parameter();
					while (la->kind == 6 /* "," */) {
						Get();
						Parameter();
					}
				}
				Expect(9 /* ")" */);
				if (la->kind == 10 /* "{" */) {
					Get();
					while (StartOf(2)) {
						if (la->kind == 12 /* "int" */ || la->kind == 13 /* "float" */ || la->kind == 14 /* "void" */) {
							Declaration();
						} else {
							Statement();
						}
					}
					Expect(11 /* "}" */);
				} else if (la->kind == 7 /* ";" */) {
					Get();
				} else SynErr(39);
				tab.closeScope(); 
			} else SynErr(40);
		}
}

void Parser::TypeSpecifier() {
		if (la->kind == 12 /* "int" */) {
			Get();
		} else if (la->kind == 13 /* "float" */) {
			Get();
		} else if (la->kind == 14 /* "void" */) {
			Get();
		} else SynErr(41);
		while (la->kind == 15 /* "*" */) {
			Get();
		}
}

void Parser::ArrayIndex() {
		Expect(16 /* "[" */);
		Expect(_integer);
		Expect(17 /* "]" */);
}

void Parser::Parameter() {
		TypeSpecifier();
		Expect(_identifier);
		if (la->kind == 16 /* "[" */) {
			Get();
			Expect(17 /* "]" */);
		}
}

void Parser::Declaration() {
		TypeSpecifier();
		Expect(_identifier);
		if (la->kind == 16 /* "[" */) {
			ArrayIndex();
		}
		tab.define(t->val) 
		while (la->kind == 6 /* "," */) {
			Get();
			Expect(_identifier);
			if (la->kind == 16 /* "[" */) {
				ArrayIndex();
			}
			tab.define(t->val) 
		}
		Expect(7 /* ";" */);
}

void Parser::Statement() {
		switch (la->kind) {
		case 10 /* "{" */: {
			tab.openScope(); 
			Get();
			while (StartOf(2)) {
				if (la->kind == 12 /* "int" */ || la->kind == 13 /* "float" */ || la->kind == 14 /* "void" */) {
					Declaration();
				} else {
					Statement();
				}
			}
			Expect(11 /* "}" */);
			tab.closeScope(); 
			break;
		}
		case 18 /* "if" */: {
			Get();
			Expect(8 /* "(" */);
			if (StartOf(3)) {
				Expression();
			}
			Expect(9 /* ")" */);
			Statement();
			if (la->kind == 19 /* "else" */) {
				Get();
				Statement();
			}
			break;
		}
		case 20 /* "for" */: {
			Get();
			Expect(8 /* "(" */);
			if (StartOf(3)) {
				Expression();
			}
			Expect(7 /* ";" */);
			if (StartOf(3)) {
				Expression();
			}
			Expect(7 /* ";" */);
			if (StartOf(3)) {
				Expression();
			}
			Expect(9 /* ")" */);
			Statement();
			break;
		}
		case 21 /* "while" */: {
			Get();
			Expect(8 /* "(" */);
			Expression();
			Expect(9 /* ")" */);
			Statement();
			break;
		}
		case 22 /* "return" */: {
			Get();
			if (StartOf(3)) {
				Expression();
			}
			Expect(7 /* ";" */);
			break;
		}
		case _identifier: case _integer: case _float: case _string: case 7 /* ";" */: case 8 /* "(" */: case 15 /* "*" */: case 32 /* "+" */: case 33 /* "-" */: case 36 /* "!" */: case 37 /* "&" */: {
			if (StartOf(3)) {
				Expression();
			}
			Expect(7 /* ";" */);
			break;
		}
		default: SynErr(42); break;
		}
}

void Parser::Expression() {
		OrExpression();
		while (la->kind == 23 /* "=" */) {
			Get();
			OrExpression();
		}
}

void Parser::OrExpression() {
		AndExpression();
		while (la->kind == 24 /* "||" */) {
			Get();
			AndExpression();
		}
}

void Parser::AndExpression() {
		RelationExpression();
		while (la->kind == 25 /* "&&" */) {
			Get();
			RelationExpression();
		}
}

void Parser::RelationExpression() {
		SimpleExpression();
		while (StartOf(4)) {
			switch (la->kind) {
			case 26 /* "<=" */: {
				Get();
				break;
			}
			case 27 /* "<" */: {
				Get();
				break;
			}
			case 28 /* ">=" */: {
				Get();
				break;
			}
			case 29 /* ">" */: {
				Get();
				break;
			}
			case 30 /* "==" */: {
				Get();
				break;
			}
			case 31 /* "!=" */: {
				Get();
				break;
			}
			}
			SimpleExpression();
		}
}

void Parser::SimpleExpression() {
		Term();
		while (la->kind == 32 /* "+" */ || la->kind == 33 /* "-" */) {
			if (la->kind == 32 /* "+" */) {
				Get();
			} else {
				Get();
			}
			Term();
		}
}

void Parser::Term() {
		Factor();
		while (la->kind == 15 /* "*" */ || la->kind == 34 /* "/" */ || la->kind == 35 /* "%" */) {
			if (la->kind == 15 /* "*" */) {
				Get();
			} else if (la->kind == 34 /* "/" */) {
				Get();
			} else {
				Get();
			}
			Factor();
		}
}

void Parser::Factor() {
		while (StartOf(5)) {
			if (la->kind == 32 /* "+" */) {
				Get();
			} else if (la->kind == 33 /* "-" */) {
				Get();
			} else if (la->kind == 36 /* "!" */) {
				Get();
			} else {
				Get();
			}
		}
		Value();
}

void Parser::Value() {
		if (la->kind == 8 /* "(" */) {
			Get();
			Expression();
			Expect(9 /* ")" */);
		} else if (la->kind == _identifier || la->kind == 37 /* "&" */) {
			if (la->kind == 37 /* "&" */) {
				Get();
			}
			Expect(_identifier);
			if (!tab.isDefined(t->val) fprintf(stderr, "ERROR: identifier not defined:  '%s'\n", t->val); 
			if (la->kind == 8 /* "(" */ || la->kind == 16 /* "[" */) {
				if (la->kind == 16 /* "[" */) {
					Get();
					Expression();
					Expect(17 /* "]" */);
				} else {
					Get();
					if (StartOf(3)) {
						Expression();
						while (la->kind == 6 /* "," */) {
							Get();
							Expression();
						}
					}
					Expect(9 /* ")" */);
				}
			}
		} else if (la->kind == _integer) {
			Get();
		} else if (la->kind == _float) {
			Get();
		} else if (la->kind == _string) {
			Get();
		} else SynErr(43);
}




// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
	template<typename U, void (U::*)() = &U::Init>
	struct ExistsIfInitIsDefinedMarker{};

	struct InitIsMissingType {
		char dummy1;
	};
	
	struct InitExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static InitIsMissingType is_here(...);

	// exist only if ExistsIfInitIsDefinedMarker is defined
	template<typename U>
	static InitExistsType is_here(ExistsIfInitIsDefinedMarker<U>*);

	enum { InitExists = (sizeof(is_here<T>(NULL)) == sizeof(InitExistsType)) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
	template<typename U, void (U::*)() = &U::Destroy>
	struct ExistsIfDestroyIsDefinedMarker{};

	struct DestroyIsMissingType {
		char dummy1;
	};
	
	struct DestroyExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static DestroyIsMissingType is_here(...);

	// exist only if ExistsIfDestroyIsDefinedMarker is defined
	template<typename U>
	static DestroyExistsType is_here(ExistsIfDestroyIsDefinedMarker<U>*);

	enum { DestroyExists = (sizeof(is_here<T>(NULL)) == sizeof(DestroyExistsType)) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
	static void CallInit(T *t) {
		// nothing to do
	}
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
	static void CallInit(T *t) {
		t->Init();
	}
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
	static void CallDestroy(T *t) {
		// nothing to do
	}
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
	static void CallDestroy(T *t) {
		t->Destroy();
	}
};

void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	Cmm();
	Expect(0);
}

Parser::Parser(Scanner *scanner) {
	maxT = 38;

	ParserInitCaller<Parser>::CallInit(this);
	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = new Errors();
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[6][40] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,x,x,x, x,T,x,x, x,x,x,x, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,T,T,T, T,x,x,T, T,x,T,x, T,T,T,T, x,x,T,x, T,T,T,x, x,x,x,x, x,x,x,x, T,T,x,x, T,T,x,x},
		{x,T,T,T, T,x,x,x, T,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,x,x, T,T,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,T, x,x,x,x, x,x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,x,x, T,x,x,x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	ParserDestroyCaller<Parser>::CallDestroy(this);
	delete errors;
	delete dummyToken;
}

Errors::Errors() {
	count = 0;
}

void Errors::SynErr(int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"identifier expected"); break;
			case 2: s = coco_string_create(L"integer expected"); break;
			case 3: s = coco_string_create(L"float expected"); break;
			case 4: s = coco_string_create(L"string expected"); break;
			case 5: s = coco_string_create(L"\"extern\" expected"); break;
			case 6: s = coco_string_create(L"\",\" expected"); break;
			case 7: s = coco_string_create(L"\";\" expected"); break;
			case 8: s = coco_string_create(L"\"(\" expected"); break;
			case 9: s = coco_string_create(L"\")\" expected"); break;
			case 10: s = coco_string_create(L"\"{\" expected"); break;
			case 11: s = coco_string_create(L"\"}\" expected"); break;
			case 12: s = coco_string_create(L"\"int\" expected"); break;
			case 13: s = coco_string_create(L"\"float\" expected"); break;
			case 14: s = coco_string_create(L"\"void\" expected"); break;
			case 15: s = coco_string_create(L"\"*\" expected"); break;
			case 16: s = coco_string_create(L"\"[\" expected"); break;
			case 17: s = coco_string_create(L"\"]\" expected"); break;
			case 18: s = coco_string_create(L"\"if\" expected"); break;
			case 19: s = coco_string_create(L"\"else\" expected"); break;
			case 20: s = coco_string_create(L"\"for\" expected"); break;
			case 21: s = coco_string_create(L"\"while\" expected"); break;
			case 22: s = coco_string_create(L"\"return\" expected"); break;
			case 23: s = coco_string_create(L"\"=\" expected"); break;
			case 24: s = coco_string_create(L"\"||\" expected"); break;
			case 25: s = coco_string_create(L"\"&&\" expected"); break;
			case 26: s = coco_string_create(L"\"<=\" expected"); break;
			case 27: s = coco_string_create(L"\"<\" expected"); break;
			case 28: s = coco_string_create(L"\">=\" expected"); break;
			case 29: s = coco_string_create(L"\">\" expected"); break;
			case 30: s = coco_string_create(L"\"==\" expected"); break;
			case 31: s = coco_string_create(L"\"!=\" expected"); break;
			case 32: s = coco_string_create(L"\"+\" expected"); break;
			case 33: s = coco_string_create(L"\"-\" expected"); break;
			case 34: s = coco_string_create(L"\"/\" expected"); break;
			case 35: s = coco_string_create(L"\"%\" expected"); break;
			case 36: s = coco_string_create(L"\"!\" expected"); break;
			case 37: s = coco_string_create(L"\"&\" expected"); break;
			case 38: s = coco_string_create(L"??? expected"); break;
			case 39: s = coco_string_create(L"invalid Cmm"); break;
			case 40: s = coco_string_create(L"invalid Cmm"); break;
			case 41: s = coco_string_create(L"invalid TypeSpecifier"); break;
			case 42: s = coco_string_create(L"invalid Statement"); break;
			case 43: s = coco_string_create(L"invalid Value"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	coco_string_delete(s);
	count++;
}

void Errors::Error(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	count++;
}

void Errors::Warning(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
}

void Errors::Warning(const wchar_t *s) {
	wprintf(L"%ls\n", s);
}

void Errors::Exception(const wchar_t* s) {
	wprintf(L"%ls", s); 
	exit(1);
}


