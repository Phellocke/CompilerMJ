#include "macros.h"
#include "symbols.hpp"
SymTab tab; // symbol table
string name;

COMPILER Cmm


CHARACTERS
    letter       = 'A' .. 'Z' + 'a' .. 'z' .
    digit        = "0123456789" .
    hex_digit    = digit + "ABCDEFabcdef" .
    tab          = '\t' .
    cr           = '\r' .
    lf           = '\n' .
    eol          = cr + lf .
    string_chars = ANY - '"' - cr - lf .
    macro_chars  = ANY - cr - lf .

TOKENS
    identifier = ( letter | '_' ) { letter | digit | '_' } .
    integer    = digit { digit } | "0x" hex_digit { hex_digit } .
    float      = ( digit { digit } '.' { digit } | { digit } '.' digit { digit } )
                      [ ( 'e' | 'E' ) digit { digit } ] .
    string     = '"' { string_chars } '"' .

PRAGMAS
    macro = '#' { macro_chars } eol . 

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO lf

IGNORE tab + cr + lf

PRODUCTIONS $checkEOF=true
    Cmm                = { [ "extern" ] TypeSpecifier identifier (. tab.define(name(t->val.begin(), t->val.end())); .)
                           ( 
                            [ ArrayIndex ] { "," identifier [ ArrayIndex ] } ";"
                           | (. tab.openScope(); .) "(" [ Parameter { "," Parameter } ] ")" 
                            ( "{" { Declaration | Statement } "}" | ";" ) (. tab.closeScope(); .)
                           )
                         }
                       .
    TypeSpecifier      = ( "int" | "float" | "void" ) { "*" }
                       .
    ArrayIndex         = "[" integer "]"
                       .
    Parameter          = TypeSpecifier identifier [ "[" "]" ] (. tab.define(name(t->val.begin(), t->val.end())); .)
                       .
    Declaration        = TypeSpecifier identifier [ ArrayIndex ] (. tab.define(name(t->val.begin(), t->val.end())); .)  { "," identifier [ ArrayIndex ] (. tab.define(name(t->val.begin(), t->val.end())); .) } ";"
                       .
    Statement          = (. tab.openScope(); .) "{" { Declaration | Statement } "}" (. tab.closeScope(); .)
                       | "if" "(" [ Expression ] ")" Statement [ "else" Statement ]
                       | "for" "(" [ Expression ] ";" [ Expression ] ";" [ Expression ] ")" Statement
                       | "while" "(" Expression ")" Statement
                       | "return" [ Expression ] ";"
                       | [ Expression ] ";"
                       .
    Expression         = OrExpression { "=" OrExpression } 
                       .
    OrExpression       = AndExpression { "||" AndExpression }
                       .
    AndExpression      = RelationExpression { "&&" RelationExpression }
                       .
    RelationExpression = SimpleExpression { ( "<=" | "<" | ">=" | ">" | "==" | "!=" ) SimpleExpression }
                       .
    SimpleExpression   = Term { ( "+" | "-" ) Term }
                       .
    Term               = Factor { ( "*" | "/" | "%" ) Factor }
                       .
    Factor             = { "+" | "-" | "!" | "*" } Value
                       .
    Value              = "(" Expression ")"
                       | [ "&" ] identifier 
                       (. if (!tab.isDefined(t->val.begin(), t->val.end())) fprintf(stderr, "ERROR: identifier not defined:  '%s'\n", t->val.begin(), t->val.end())); .)
                       [ "[" Expression "]" | "(" [ Expression { "," Expression } ] ")" ]
                       | integer
                       | float
                       | string
                       .
END Cmm.
